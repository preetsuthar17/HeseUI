{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "title": "Accordion",
  "author": "Preet Suthar <hi@preetsuthar.me>",
  "description": "A simple accordion component.",
  "dependencies": ["@base-ui-components/react"],
  "files": [
    {
      "path": "registry/accordion/accordion.tsx",
      "content": "'use client';\n\nimport { Accordion as BaseAccordion } from '@base-ui-components/react/accordion';\nimport React from 'react';\nimport { cn } from '@/lib/utils';\n\nconst Accordion = React.forwardRef<\n  React.ComponentRef<typeof BaseAccordion.Root>,\n  React.ComponentPropsWithoutRef<typeof BaseAccordion.Root> & {\n    type?: 'single' | 'multiple';\n    collapsible?: boolean;\n    defaultValue?: string[];\n    value?: string[];\n    onValueChange?: (value: string[]) => void;\n  }\n>(\n  (\n    {\n      type = 'single',\n      collapsible = false,\n      defaultValue,\n      value,\n      onValueChange,\n      openMultiple = true,\n      ...props\n    },\n    ref\n  ) => {\n    const handleValueChange = (newValue: string[]) => {\n      if (type === 'single' && !collapsible && newValue.length === 0) {\n        return;\n      }\n      onValueChange?.(newValue);\n    };\n\n    return (\n      <BaseAccordion.Root\n        defaultValue={defaultValue}\n        onValueChange={handleValueChange}\n        openMultiple={type === 'multiple' ? openMultiple : false}\n        ref={ref}\n        value={value}\n        {...props}\n      />\n    );\n  }\n);\nAccordion.displayName = 'Accordion';\n\nconst AccordionItem = React.forwardRef<\n  React.ComponentRef<typeof BaseAccordion.Item>,\n  React.ComponentPropsWithoutRef<typeof BaseAccordion.Item>\n>(({ className, ...props }, ref) => (\n  <BaseAccordion.Item\n    className={cn('border-border border-b', className)}\n    ref={ref}\n    {...props}\n  />\n));\nAccordionItem.displayName = 'AccordionItem';\n\nconst AccordionTrigger = React.forwardRef<\n  React.ComponentRef<typeof BaseAccordion.Trigger>,\n  React.ComponentPropsWithoutRef<typeof BaseAccordion.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <BaseAccordion.Header className=\"flex\">\n    <BaseAccordion.Trigger\n      className={cn(\n        'group relative flex w-full items-center justify-between gap-4 py-4 text-left font-medium transition-all hover:underline',\n        className\n      )}\n      ref={ref}\n      {...props}\n    >\n      {children}\n      <ChevronDownIcon className=\"h-4 w-4 shrink-0 transition-transform duration-200 ease-out group-data-[panel-open]:rotate-180\" />\n    </BaseAccordion.Trigger>\n  </BaseAccordion.Header>\n));\nAccordionTrigger.displayName = 'AccordionTrigger';\n\nconst AccordionContent = React.forwardRef<\n  React.ComponentRef<typeof BaseAccordion.Panel>,\n  React.ComponentPropsWithoutRef<typeof BaseAccordion.Panel>\n>(({ className, children, ...props }, ref) => (\n  <BaseAccordion.Panel\n    className={cn(\n      'h-[var(--accordion-panel-height)] overflow-hidden text-sm transition-[height] duration-200 ease-out data-[ending-style]:h-0 data-[starting-style]:h-0',\n      className\n    )}\n    ref={ref}\n    {...props}\n  >\n    <div className=\"pt-0 pb-4\">{children}</div>\n  </BaseAccordion.Panel>\n));\nAccordionContent.displayName = 'AccordionContent';\n\nfunction ChevronDownIcon(props: React.ComponentProps<'svg'>) {\n  return (\n    <svg\n      fill=\"none\"\n      height=\"24\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"2\"\n      viewBox=\"0 0 24 24\"\n      width=\"24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <title>Expand section</title>\n      <path d=\"m6 9 6 6 6-6\" />\n    </svg>\n  );\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n",
      "type": "registry:ui"
    }
  ]
}
